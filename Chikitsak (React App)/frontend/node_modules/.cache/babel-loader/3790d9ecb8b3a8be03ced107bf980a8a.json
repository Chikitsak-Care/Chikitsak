{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\n\nvar XhrClient =\n/** @class */\nfunction () {\n  function XhrClient() {}\n\n  XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url,\n      /*async: */\n      true);\n\n      if (enableCaching) {// TODO: (shivb) ensure that this can be cached\n        // xhr.setRequestHeader(\"Cache-Control\", \"Public\");\n      }\n\n      xhr.onload = function (ev) {\n        if (xhr.status < 200 || xhr.status >= 300) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        try {\n          var jsonResponse = JSON.parse(xhr.responseText);\n        } catch (e) {\n          reject(_this.handleError(xhr.responseText));\n        }\n\n        resolve(jsonResponse);\n      };\n\n      xhr.onerror = function (ev) {\n        reject(xhr.status);\n      };\n\n      if (method === \"GET\") {\n        xhr.send();\n      } else {\n        throw \"not implemented\";\n      }\n    });\n  };\n\n  XhrClient.prototype.handleError = function (responseText) {\n    var jsonResponse;\n\n    try {\n      jsonResponse = JSON.parse(responseText);\n\n      if (jsonResponse.error) {\n        return jsonResponse.error;\n      } else {\n        throw responseText;\n      }\n    } catch (e) {\n      return responseText;\n    }\n  };\n\n  return XhrClient;\n}();\n\nexports.XhrClient = XhrClient;","map":{"version":3,"sources":["../src/XHRClient.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;AAKA,IAAA,SAAA;AAAA;AAAA,YAAA;AAAA,WAAA,SAAA,GAAA,CAkDC;;AAjDQ,EAAA,SAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UAAwB,GAAxB,EAAqC,MAArC,EAAqD,aAArD,EAA4E;AAA5E,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACzC,UAAI,GAAG,GAAG,IAAI,cAAJ,EAAV;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,MAAT,EAAiB,GAAjB;AAAsB;AAAY,UAAlC;;AACA,UAAI,aAAJ,EAAmB,CACjB;AACA;AACD;;AAED,MAAA,GAAG,CAAC,MAAJ,GAAa,UAAC,EAAD,EAAG;AACZ,YAAI,GAAG,CAAC,MAAJ,GAAa,GAAb,IAAoB,GAAG,CAAC,MAAJ,IAAc,GAAtC,EAA2C;AACvC,UAAA,MAAM,CAAC,KAAI,CAAC,WAAL,CAAiB,GAAG,CAAC,YAArB,CAAD,CAAN;AACH;;AAED,YAAI;AACA,cAAI,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAAnB;AACH,SAFD,CAEE,OAAO,CAAP,EAAU;AACR,UAAA,MAAM,CAAC,KAAI,CAAC,WAAL,CAAiB,GAAG,CAAC,YAArB,CAAD,CAAN;AACH;;AAED,QAAA,OAAO,CAAC,YAAD,CAAP;AACH,OAZD;;AAcA,MAAA,GAAG,CAAC,OAAJ,GAAc,UAAC,EAAD,EAAG;AACf,QAAA,MAAM,CAAC,GAAG,CAAC,MAAL,CAAN;AACD,OAFD;;AAIA,UAAI,MAAM,KAAK,KAAf,EAAsB;AACpB,QAAA,GAAG,CAAC,IAAJ;AACD,OAFD,MAGK;AACH,cAAM,iBAAN;AACD;AACF,KAhCM,CAAP;AAiCD,GAlCM;;AAoCG,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,YAAtB,EAA0C;AACxC,QAAI,YAAJ;;AACA,QAAI;AACF,MAAA,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,YAAX,CAAf;;AACA,UAAI,YAAY,CAAC,KAAjB,EAAwB;AACpB,eAAO,YAAY,CAAC,KAApB;AACH,OAFD,MAEO;AACH,cAAM,YAAN;AACH;AACF,KAPD,CAOE,OAAO,CAAP,EAAU;AACV,aAAO,YAAP;AACD;AACF,GAZS;;AAaZ,SAAA,SAAA;AAAC,CAlDD,EAAA;;AAAa,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*\r\n * XHR client for JSON endpoints\r\n * https://www.npmjs.com/package/async-promise\r\n * @hidden\r\n */\r\nvar XhrClient = /** @class */ (function () {\r\n    function XhrClient() {\r\n    }\r\n    XhrClient.prototype.sendRequestAsync = function (url, method, enableCaching) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open(method, url, /*async: */ true);\r\n            if (enableCaching) {\r\n                // TODO: (shivb) ensure that this can be cached\r\n                // xhr.setRequestHeader(\"Cache-Control\", \"Public\");\r\n            }\r\n            xhr.onload = function (ev) {\r\n                if (xhr.status < 200 || xhr.status >= 300) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                try {\r\n                    var jsonResponse = JSON.parse(xhr.responseText);\r\n                }\r\n                catch (e) {\r\n                    reject(_this.handleError(xhr.responseText));\r\n                }\r\n                resolve(jsonResponse);\r\n            };\r\n            xhr.onerror = function (ev) {\r\n                reject(xhr.status);\r\n            };\r\n            if (method === \"GET\") {\r\n                xhr.send();\r\n            }\r\n            else {\r\n                throw \"not implemented\";\r\n            }\r\n        });\r\n    };\r\n    XhrClient.prototype.handleError = function (responseText) {\r\n        var jsonResponse;\r\n        try {\r\n            jsonResponse = JSON.parse(responseText);\r\n            if (jsonResponse.error) {\r\n                return jsonResponse.error;\r\n            }\r\n            else {\r\n                throw responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return responseText;\r\n        }\r\n    };\r\n    return XhrClient;\r\n}());\r\nexports.XhrClient = XhrClient;\r\n//# sourceMappingURL=XHRClient.js.map"]},"metadata":{},"sourceType":"script"}