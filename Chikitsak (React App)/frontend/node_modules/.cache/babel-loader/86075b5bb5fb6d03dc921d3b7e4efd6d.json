{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Utils_1 = require(\"./Utils\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar XHRClient_1 = require(\"./XHRClient\");\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\n/*\r\n * @hidden\r\n */\n\n\nvar AuthorityType;\n\n(function (AuthorityType) {\n  AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\n  AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\n  AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\n/*\r\n * @hidden\r\n */\n\n\nvar Authority =\n/** @class */\nfunction () {\n  function Authority(authority, validateAuthority) {\n    this.IsValidationEnabled = validateAuthority;\n    this.CanonicalAuthority = authority;\n    this.validateAsUri();\n  }\n\n  Object.defineProperty(Authority.prototype, \"Tenant\", {\n    get: function () {\n      return this.CanonicalAuthorityUrlComponents.PathSegments[0];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\n    get: function () {\n      this.validateResolved();\n      return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Authority.prototype.validateResolved = function () {\n    if (!this.tenantDiscoveryResponse) {\n      throw \"Please call ResolveEndpointsAsync first\";\n    }\n  };\n\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\n    /*\r\n     * A URL that is the authority set by the developer\r\n     */\n    get: function () {\n      return this.canonicalAuthority;\n    },\n    set: function (url) {\n      this.canonicalAuthority = Utils_1.Utils.CanonicalizeUri(url);\n      this.canonicalAuthorityUrlComponents = null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\n    get: function () {\n      if (!this.canonicalAuthorityUrlComponents) {\n        this.canonicalAuthorityUrlComponents = Utils_1.Utils.GetUrlComponents(this.CanonicalAuthority);\n      }\n\n      return this.canonicalAuthorityUrlComponents;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\n    /*\r\n     * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n     */\n    get: function () {\n      return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\r\n   * Given a string, validate that it is of the form https://domain/path\r\n   */\n\n  Authority.prototype.validateAsUri = function () {\n    var components;\n\n    try {\n      components = this.CanonicalAuthorityUrlComponents;\n    } catch (e) {\n      throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\n    }\n\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ErrorMessage_1.ErrorMessage.authorityUriInsecure;\n    }\n\n    if (!components.PathSegments || components.PathSegments.length < 1) {\n      throw ErrorMessage_1.ErrorMessage.authorityUriInvalidPath;\n    }\n  };\n  /*\r\n   * Calls the OIDC endpoint and returns the response\r\n   */\n\n\n  Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\n    var client = new XHRClient_1.XhrClient();\n    return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\",\n    /*enableCaching: */\n    true).then(function (response) {\n      return {\n        AuthorizationEndpoint: response.authorization_endpoint,\n        EndSessionEndpoint: response.end_session_endpoint,\n        Issuer: response.issuer\n      };\n    });\n  };\n  /*\r\n   * Returns a promise.\r\n   * Checks to see if the authority is in the cache\r\n   * Discover endpoints via openid-configuration\r\n   * If successful, caches the endpoint for later use in OIDC\r\n   */\n\n\n  Authority.prototype.ResolveEndpointsAsync = function () {\n    var _this = this;\n\n    var openIdConfigurationEndpoint = \"\";\n    return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {\n      openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;\n      return _this.DiscoverEndpoints(openIdConfigurationEndpoint);\n    }).then(function (tenantDiscoveryResponse) {\n      _this.tenantDiscoveryResponse = tenantDiscoveryResponse;\n      return _this;\n    });\n  };\n\n  return Authority;\n}();\n\nexports.Authority = Authority;","map":{"version":3,"sources":["../src/Authority.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Utils_1 = require(\"./Utils\");\r\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\r\nvar XHRClient_1 = require(\"./XHRClient\");\r\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n/*\r\n * @hidden\r\n */\r\nvar AuthorityType;\r\n(function (AuthorityType) {\r\n    AuthorityType[AuthorityType[\"Aad\"] = 0] = \"Aad\";\r\n    AuthorityType[AuthorityType[\"Adfs\"] = 1] = \"Adfs\";\r\n    AuthorityType[AuthorityType[\"B2C\"] = 2] = \"B2C\";\r\n})(AuthorityType = exports.AuthorityType || (exports.AuthorityType = {}));\r\n/*\r\n * @hidden\r\n */\r\nvar Authority = /** @class */ (function () {\r\n    function Authority(authority, validateAuthority) {\r\n        this.IsValidationEnabled = validateAuthority;\r\n        this.CanonicalAuthority = authority;\r\n        this.validateAsUri();\r\n    }\r\n    Object.defineProperty(Authority.prototype, \"Tenant\", {\r\n        get: function () {\r\n            return this.CanonicalAuthorityUrlComponents.PathSegments[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"AuthorizationEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.AuthorizationEndpoint.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"EndSessionEndpoint\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.EndSessionEndpoint.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"SelfSignedJwtAudience\", {\r\n        get: function () {\r\n            this.validateResolved();\r\n            return this.tenantDiscoveryResponse.Issuer.replace(\"{tenant}\", this.Tenant);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Authority.prototype.validateResolved = function () {\r\n        if (!this.tenantDiscoveryResponse) {\r\n            throw \"Please call ResolveEndpointsAsync first\";\r\n        }\r\n    };\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthority\", {\r\n        /*\r\n         * A URL that is the authority set by the developer\r\n         */\r\n        get: function () {\r\n            return this.canonicalAuthority;\r\n        },\r\n        set: function (url) {\r\n            this.canonicalAuthority = Utils_1.Utils.CanonicalizeUri(url);\r\n            this.canonicalAuthorityUrlComponents = null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"CanonicalAuthorityUrlComponents\", {\r\n        get: function () {\r\n            if (!this.canonicalAuthorityUrlComponents) {\r\n                this.canonicalAuthorityUrlComponents = Utils_1.Utils.GetUrlComponents(this.CanonicalAuthority);\r\n            }\r\n            return this.canonicalAuthorityUrlComponents;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Authority.prototype, \"DefaultOpenIdConfigurationEndpoint\", {\r\n        /*\r\n         * // http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\r\n         */\r\n        get: function () {\r\n            return this.CanonicalAuthority + \"v2.0/.well-known/openid-configuration\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*\r\n     * Given a string, validate that it is of the form https://domain/path\r\n     */\r\n    Authority.prototype.validateAsUri = function () {\r\n        var components;\r\n        try {\r\n            components = this.CanonicalAuthorityUrlComponents;\r\n        }\r\n        catch (e) {\r\n            throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\r\n        }\r\n        if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ErrorMessage_1.ErrorMessage.authorityUriInsecure;\r\n        }\r\n        if (!components.PathSegments || components.PathSegments.length < 1) {\r\n            throw ErrorMessage_1.ErrorMessage.authorityUriInvalidPath;\r\n        }\r\n    };\r\n    /*\r\n     * Calls the OIDC endpoint and returns the response\r\n     */\r\n    Authority.prototype.DiscoverEndpoints = function (openIdConfigurationEndpoint) {\r\n        var client = new XHRClient_1.XhrClient();\r\n        return client.sendRequestAsync(openIdConfigurationEndpoint, \"GET\", /*enableCaching: */ true)\r\n            .then(function (response) {\r\n            return {\r\n                AuthorizationEndpoint: response.authorization_endpoint,\r\n                EndSessionEndpoint: response.end_session_endpoint,\r\n                Issuer: response.issuer\r\n            };\r\n        });\r\n    };\r\n    /*\r\n     * Returns a promise.\r\n     * Checks to see if the authority is in the cache\r\n     * Discover endpoints via openid-configuration\r\n     * If successful, caches the endpoint for later use in OIDC\r\n     */\r\n    Authority.prototype.ResolveEndpointsAsync = function () {\r\n        var _this = this;\r\n        var openIdConfigurationEndpoint = \"\";\r\n        return this.GetOpenIdConfigurationEndpointAsync().then(function (openIdConfigurationEndpointResponse) {\r\n            openIdConfigurationEndpoint = openIdConfigurationEndpointResponse;\r\n            return _this.DiscoverEndpoints(openIdConfigurationEndpoint);\r\n        }).then(function (tenantDiscoveryResponse) {\r\n            _this.tenantDiscoveryResponse = tenantDiscoveryResponse;\r\n            return _this;\r\n        });\r\n    };\r\n    return Authority;\r\n}());\r\nexports.Authority = Authority;\r\n//# sourceMappingURL=Authority.js.map"]},"metadata":{},"sourceType":"script"}