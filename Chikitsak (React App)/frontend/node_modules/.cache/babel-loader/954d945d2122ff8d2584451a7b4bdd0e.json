{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar XHRClient_1 = require(\"./XHRClient\");\n/**\r\n * @hidden\r\n */\n\n\nvar AadAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AadAuthority, _super);\n\n  function AadAuthority(authority, validateAuthority) {\n    return _super.call(this, authority, validateAuthority) || this;\n  }\n\n  Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\n    get: function () {\n      return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return Authority_1.AuthorityType.Aad;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a promise which resolves to the OIDC endpoint\r\n   * Only responds with the endpoint\r\n   */\n\n  AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    var _this = this;\n\n    var resultPromise = new Promise(function (resolve, reject) {\n      return resolve(_this.DefaultOpenIdConfigurationEndpoint);\n    });\n\n    if (!this.IsValidationEnabled) {\n      return resultPromise;\n    }\n\n    var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;\n\n    if (this.IsInTrustedHostList(host)) {\n      return resultPromise;\n    }\n\n    var client = new XHRClient_1.XhrClient();\n    return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true).then(function (response) {\n      return response.tenant_discovery_endpoint;\n    });\n  };\n  /**\r\n   * Checks to see if the host is in a list of trusted hosts\r\n   * @param {string} The host to look up\r\n   */\n\n\n  AadAuthority.prototype.IsInTrustedHostList = function (host) {\n    return AadAuthority.TrustedHostList[host.toLowerCase()];\n  };\n\n  AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\n  AadAuthority.TrustedHostList = {\n    \"login.windows.net\": \"login.windows.net\",\n    \"login.chinacloudapi.cn\": \"login.chinacloudapi.cn\",\n    \"login.cloudgovapi.us\": \"login.cloudgovapi.us\",\n    \"login.microsoftonline.com\": \"login.microsoftonline.com\",\n    \"login.microsoftonline.de\": \"login.microsoftonline.de\",\n    \"login.microsoftonline.us\": \"login.microsoftonline.us\"\n  };\n  return AadAuthority;\n}(Authority_1.Authority);\n\nexports.AadAuthority = AadAuthority;","map":{"version":3,"sources":["../src/AadAuthority.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAOhC,WAAA,YAAA,CAAmB,SAAnB,EAAsC,iBAAtC,EAAgE;WAC9D,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,iBAAjB,KAAmC,I;AACpC;;AAND,EAAA,MAAA,CAAA,cAAA,CAAY,YAAA,CAAA,SAAZ,EAAY,iCAAZ,EAA2C;SAA3C,YAAA;AACI,aAAU,YAAY,CAAC,4BAAb,GAAyC,0CAAzC,GAAoF,KAAK,kBAAzF,GAA2G,uBAArH;AACH,KAF0C;oBAAA;;AAAA,GAA3C;AAQA,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;SAAxB,YAAA;AACE,aAAO,WAAA,CAAA,aAAA,CAAc,GAArB;AACD,KAFuB;oBAAA;;AAAA,GAAxB;AAaA;;;;;AAIO,EAAA,YAAA,CAAA,SAAA,CAAA,mCAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,QAAI,aAAa,GAAoB,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACzE,aAAA,OAAO,CAAC,KAAI,CAAC,kCAAN,CAAP;AAAgD,KADX,CAArC;;AAGF,QAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,aAAO,aAAP;AACD;;AAED,QAAI,IAAI,GAAW,KAAK,+BAAL,CAAqC,eAAxD;;AACA,QAAI,KAAK,mBAAL,CAAyB,IAAzB,CAAJ,EAAoC;AAClC,aAAO,aAAP;AACD;;AAED,QAAI,MAAM,GAAc,IAAI,WAAA,CAAA,SAAJ,EAAxB;AAEA,WAAO,MAAM,CAAC,gBAAP,CAAwB,KAAK,+BAA7B,EAA8D,KAA9D,EAAqE,IAArE,EACJ,IADI,CACC,UAAC,QAAD,EAAS;AACb,aAAO,QAAQ,CAAC,yBAAhB;AACD,KAHI,CAAP;AAID,GAnBM;AAqBP;;;;;;AAIO,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,IAA3B,EAAuC;AACrC,WAAO,YAAY,CAAC,eAAb,CAA6B,IAAI,CAAC,WAAL,EAA7B,CAAP;AACD,GAFM;;AApDiB,EAAA,YAAA,CAAA,4BAAA,GAAuC,6DAAvC;AAcA,EAAA,YAAA,CAAA,eAAA,GAAuB;AAC7C,yBAAqB,mBADwB;AAE7C,8BAA0B,wBAFmB;AAG7C,4BAAwB,sBAHqB;AAI7C,iCAA6B,2BAJgB;AAK7C,gCAA4B,0BALiB;AAM7C,gCAA4B;AANiB,GAAvB;AAyC1B,SAAA,YAAA;AAAC,CAxDD,CAAkC,WAAA,CAAA,SAAlC,CAAA;;AAAa,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar Authority_1 = require(\"./Authority\");\r\nvar XHRClient_1 = require(\"./XHRClient\");\r\n/**\r\n * @hidden\r\n */\r\nvar AadAuthority = /** @class */ (function (_super) {\r\n    tslib_1.__extends(AadAuthority, _super);\r\n    function AadAuthority(authority, validateAuthority) {\r\n        return _super.call(this, authority, validateAuthority) || this;\r\n    }\r\n    Object.defineProperty(AadAuthority.prototype, \"AadInstanceDiscoveryEndpointUrl\", {\r\n        get: function () {\r\n            return AadAuthority.AadInstanceDiscoveryEndpoint + \"?api-version=1.0&authorization_endpoint=\" + this.CanonicalAuthority + \"oauth2/v2.0/authorize\";\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(AadAuthority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return Authority_1.AuthorityType.Aad;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise which resolves to the OIDC endpoint\r\n     * Only responds with the endpoint\r\n     */\r\n    AadAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        var _this = this;\r\n        var resultPromise = new Promise(function (resolve, reject) {\r\n            return resolve(_this.DefaultOpenIdConfigurationEndpoint);\r\n        });\r\n        if (!this.IsValidationEnabled) {\r\n            return resultPromise;\r\n        }\r\n        var host = this.CanonicalAuthorityUrlComponents.HostNameAndPort;\r\n        if (this.IsInTrustedHostList(host)) {\r\n            return resultPromise;\r\n        }\r\n        var client = new XHRClient_1.XhrClient();\r\n        return client.sendRequestAsync(this.AadInstanceDiscoveryEndpointUrl, \"GET\", true)\r\n            .then(function (response) {\r\n            return response.tenant_discovery_endpoint;\r\n        });\r\n    };\r\n    /**\r\n     * Checks to see if the host is in a list of trusted hosts\r\n     * @param {string} The host to look up\r\n     */\r\n    AadAuthority.prototype.IsInTrustedHostList = function (host) {\r\n        return AadAuthority.TrustedHostList[host.toLowerCase()];\r\n    };\r\n    AadAuthority.AadInstanceDiscoveryEndpoint = \"https://login.microsoftonline.com/common/discovery/instance\";\r\n    AadAuthority.TrustedHostList = {\r\n        \"login.windows.net\": \"login.windows.net\",\r\n        \"login.chinacloudapi.cn\": \"login.chinacloudapi.cn\",\r\n        \"login.cloudgovapi.us\": \"login.cloudgovapi.us\",\r\n        \"login.microsoftonline.com\": \"login.microsoftonline.com\",\r\n        \"login.microsoftonline.de\": \"login.microsoftonline.de\",\r\n        \"login.microsoftonline.us\": \"login.microsoftonline.us\"\r\n    };\r\n    return AadAuthority;\r\n}(Authority_1.Authority));\r\nexports.AadAuthority = AadAuthority;\r\n//# sourceMappingURL=AadAuthority.js.map"]},"metadata":{},"sourceType":"script"}