{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar AadAuthority_1 = require(\"./AadAuthority\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar Utils_1 = require(\"./Utils\");\n/*\r\n * @hidden\r\n */\n\n\nvar B2cAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(B2cAuthority, _super);\n\n  function B2cAuthority(authority, validateAuthority) {\n    var _this = _super.call(this, authority, validateAuthority) || this;\n\n    var urlComponents = Utils_1.Utils.GetUrlComponents(authority);\n    var pathSegments = urlComponents.PathSegments;\n\n    if (pathSegments.length < 3) {\n      throw ErrorMessage_1.ErrorMessage.b2cAuthorityUriInvalidPath;\n    }\n\n    _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\n    return _this;\n  }\n\n  Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return Authority_1.AuthorityType.B2C;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\r\n   * Returns a promise with the TenantDiscoveryEndpoint\r\n   */\n\n  B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    var _this = this;\n\n    var resultPromise = new Promise(function (resolve, reject) {\n      return resolve(_this.DefaultOpenIdConfigurationEndpoint);\n    });\n\n    if (!this.IsValidationEnabled) {\n      return resultPromise;\n    }\n\n    if (this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n      return resultPromise;\n    }\n\n    return new Promise(function (resolve, reject) {\n      return reject(ErrorMessage_1.ErrorMessage.unsupportedAuthorityValidation);\n    });\n  };\n\n  return B2cAuthority;\n}(AadAuthority_1.AadAuthority);\n\nexports.B2cAuthority = B2cAuthority;","map":{"version":3,"sources":["../src/B2cAuthority.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAChC,WAAA,YAAA,CAAmB,SAAnB,EAAsC,iBAAtC,EAAgE;AAAhE,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,iBAAjB,KAAmC,IADrC;;AAEE,QAAI,aAAa,GAAG,OAAA,CAAA,KAAA,CAAM,gBAAN,CAAuB,SAAvB,CAApB;AAEA,QAAI,YAAY,GAAG,aAAa,CAAC,YAAjC;;AACA,QAAI,YAAY,CAAC,MAAb,GAAsB,CAA1B,EAA6B;AACzB,YAAM,cAAA,CAAA,YAAA,CAAa,0BAAnB;AACH;;AAED,IAAA,KAAI,CAAC,kBAAL,GAA0B,aAAW,aAAa,CAAC,eAAzB,GAAwC,GAAxC,GAA4C,YAAY,CAAC,CAAD,CAAxD,GAA2D,GAA3D,GAA+D,YAAY,CAAC,CAAD,CAA3E,GAA8E,GAA9E,GAAkF,YAAY,CAAC,CAAD,CAA9F,GAAiG,GAA3H;;AACD;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;SAAxB,YAAA;AACE,aAAO,WAAA,CAAA,aAAA,CAAc,GAArB;AACD,KAFuB;oBAAA;;AAAA,GAAxB;AAIA;;;;AAGO,EAAA,YAAA,CAAA,SAAA,CAAA,mCAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,aAAa,GAAG,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACtD,aAAA,OAAO,CAAC,KAAI,CAAC,kCAAN,CAAP;AAAgD,KAD9B,CAApB;;AAGA,QAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B,aAAO,aAAP;AACD;;AAED,QAAI,KAAK,mBAAL,CAAyB,KAAK,+BAAL,CAAqC,eAA9D,CAAJ,EAAoF;AAClF,aAAO,aAAP;AACD;;AAED,WAAO,IAAI,OAAJ,CAAoB,UAAC,OAAD,EAAU,MAAV,EAAgB;AACzC,aAAA,MAAM,CAAC,cAAA,CAAA,YAAA,CAAa,8BAAd,CAAN;AAAmD,KAD9C,CAAP;AAED,GAdM;;AAeT,SAAA,YAAA;AAAC,CAnCD,CAAkC,cAAA,CAAA,YAAlC,CAAA;;AAAa,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar tslib_1 = require(\"tslib\");\r\nvar AadAuthority_1 = require(\"./AadAuthority\");\r\nvar Authority_1 = require(\"./Authority\");\r\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\r\nvar Utils_1 = require(\"./Utils\");\r\n/*\r\n * @hidden\r\n */\r\nvar B2cAuthority = /** @class */ (function (_super) {\r\n    tslib_1.__extends(B2cAuthority, _super);\r\n    function B2cAuthority(authority, validateAuthority) {\r\n        var _this = _super.call(this, authority, validateAuthority) || this;\r\n        var urlComponents = Utils_1.Utils.GetUrlComponents(authority);\r\n        var pathSegments = urlComponents.PathSegments;\r\n        if (pathSegments.length < 3) {\r\n            throw ErrorMessage_1.ErrorMessage.b2cAuthorityUriInvalidPath;\r\n        }\r\n        _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return Authority_1.AuthorityType.B2C;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /*\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        var _this = this;\r\n        var resultPromise = new Promise(function (resolve, reject) {\r\n            return resolve(_this.DefaultOpenIdConfigurationEndpoint);\r\n        });\r\n        if (!this.IsValidationEnabled) {\r\n            return resultPromise;\r\n        }\r\n        if (this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n            return resultPromise;\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            return reject(ErrorMessage_1.ErrorMessage.unsupportedAuthorityValidation);\r\n        });\r\n    };\r\n    return B2cAuthority;\r\n}(AadAuthority_1.AadAuthority));\r\nexports.B2cAuthority = B2cAuthority;\r\n//# sourceMappingURL=B2cAuthority.js.map"]},"metadata":{},"sourceType":"script"}