{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\r\n * @hidden\r\n */\n\nvar Utils_1 = require(\"./Utils\");\n\nvar AadAuthority_1 = require(\"./AadAuthority\");\n\nvar B2cAuthority_1 = require(\"./B2cAuthority\");\n\nvar Authority_1 = require(\"./Authority\");\n\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\n\nvar AuthorityFactory =\n/** @class */\nfunction () {\n  function AuthorityFactory() {}\n  /*\r\n  * Parse the url and determine the type of authority\r\n  */\n\n\n  AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {\n    authorityUrl = Utils_1.Utils.CanonicalizeUri(authorityUrl);\n    var components = Utils_1.Utils.GetUrlComponents(authorityUrl);\n    var pathSegments = components.PathSegments;\n\n    switch (pathSegments[0]) {\n      case \"tfp\":\n        return Authority_1.AuthorityType.B2C;\n\n      case \"adfs\":\n        return Authority_1.AuthorityType.Adfs;\n\n      default:\n        return Authority_1.AuthorityType.Aad;\n    }\n  };\n  /*\r\n  * Create an authority object of the correct type based on the url\r\n  * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n  */\n\n\n  AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {\n    var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl); // Depending on above detection, create the right type.\n\n    switch (type) {\n      case Authority_1.AuthorityType.B2C:\n        return new B2cAuthority_1.B2cAuthority(authorityUrl, validateAuthority);\n\n      case Authority_1.AuthorityType.Aad:\n        return new AadAuthority_1.AadAuthority(authorityUrl, validateAuthority);\n\n      default:\n        throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\n    }\n  };\n\n  return AuthorityFactory;\n}();\n\nexports.AuthorityFactory = AuthorityFactory;","map":{"version":3,"sources":["../src/AuthorityFactory.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAA,gBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,gBAAA,GAAA,CAmCC;AAlCG;;;;;AAGe,EAAA,gBAAA,CAAA,sBAAA,GAAf,UAAsC,YAAtC,EAA0D;AACtD,IAAA,YAAY,GAAG,OAAA,CAAA,KAAA,CAAM,eAAN,CAAsB,YAAtB,CAAf;AACA,QAAI,UAAU,GAAG,OAAA,CAAA,KAAA,CAAM,gBAAN,CAAuB,YAAvB,CAAjB;AACA,QAAI,YAAY,GAAG,UAAU,CAAC,YAA9B;;AACA,YAAQ,YAAY,CAAC,CAAD,CAApB;AACI,WAAK,KAAL;AACI,eAAO,WAAA,CAAA,aAAA,CAAc,GAArB;;AACJ,WAAK,MAAL;AACI,eAAO,WAAA,CAAA,aAAA,CAAc,IAArB;;AACJ;AACI,eAAO,WAAA,CAAA,aAAA,CAAc,GAArB;AANR;AAQH,GAZc;AAcf;;;;;;AAIc,EAAA,gBAAA,CAAA,cAAA,GAAd,UAA6B,YAA7B,EAAmD,iBAAnD,EAA6E;AACzE,QAAI,IAAI,GAAG,gBAAgB,CAAC,sBAAjB,CAAwC,YAAxC,CAAX,CADyE,CAEzE;;AACA,YAAQ,IAAR;AACI,WAAK,WAAA,CAAA,aAAA,CAAc,GAAnB;AACI,eAAO,IAAI,cAAA,CAAA,YAAJ,CAAiB,YAAjB,EAA+B,iBAA/B,CAAP;;AACJ,WAAK,WAAA,CAAA,aAAA,CAAc,GAAnB;AACI,eAAO,IAAI,cAAA,CAAA,YAAJ,CAAiB,YAAjB,EAA+B,iBAA/B,CAAP;;AACJ;AACI,cAAM,cAAA,CAAA,YAAA,CAAa,oBAAnB;AANR;AAQH,GAXa;;AAalB,SAAA,gBAAA;AAAC,CAnCD,EAAA;;AAAa,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright (c) Microsoft Corporation\r\n *  All Rights Reserved\r\n *  MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this\r\n * software and associated documentation files (the 'Software'), to deal in the Software\r\n * without restriction, including without limitation the rights to use, copy, modify,\r\n * merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to the following\r\n * conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\r\n * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT\r\n * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/*\r\n * @hidden\r\n */\r\nvar Utils_1 = require(\"./Utils\");\r\nvar AadAuthority_1 = require(\"./AadAuthority\");\r\nvar B2cAuthority_1 = require(\"./B2cAuthority\");\r\nvar Authority_1 = require(\"./Authority\");\r\nvar ErrorMessage_1 = require(\"./ErrorMessage\");\r\nvar AuthorityFactory = /** @class */ (function () {\r\n    function AuthorityFactory() {\r\n    }\r\n    /*\r\n    * Parse the url and determine the type of authority\r\n    */\r\n    AuthorityFactory.DetectAuthorityFromUrl = function (authorityUrl) {\r\n        authorityUrl = Utils_1.Utils.CanonicalizeUri(authorityUrl);\r\n        var components = Utils_1.Utils.GetUrlComponents(authorityUrl);\r\n        var pathSegments = components.PathSegments;\r\n        switch (pathSegments[0]) {\r\n            case \"tfp\":\r\n                return Authority_1.AuthorityType.B2C;\r\n            case \"adfs\":\r\n                return Authority_1.AuthorityType.Adfs;\r\n            default:\r\n                return Authority_1.AuthorityType.Aad;\r\n        }\r\n    };\r\n    /*\r\n    * Create an authority object of the correct type based on the url\r\n    * Performs basic authority validation - checks to see if the authority is of a valid type (eg aad, b2c)\r\n    */\r\n    AuthorityFactory.CreateInstance = function (authorityUrl, validateAuthority) {\r\n        var type = AuthorityFactory.DetectAuthorityFromUrl(authorityUrl);\r\n        // Depending on above detection, create the right type.\r\n        switch (type) {\r\n            case Authority_1.AuthorityType.B2C:\r\n                return new B2cAuthority_1.B2cAuthority(authorityUrl, validateAuthority);\r\n            case Authority_1.AuthorityType.Aad:\r\n                return new AadAuthority_1.AadAuthority(authorityUrl, validateAuthority);\r\n            default:\r\n                throw ErrorMessage_1.ErrorMessage.invalidAuthorityType;\r\n        }\r\n    };\r\n    return AuthorityFactory;\r\n}());\r\nexports.AuthorityFactory = AuthorityFactory;\r\n//# sourceMappingURL=AuthorityFactory.js.map"]},"metadata":{},"sourceType":"script"}